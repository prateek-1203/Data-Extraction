

const path = require("path");
const fs = require("fs");
const axios = require("axios");
const pdfParse = require("pdf-parse");
const XLSX = require("xlsx");
const Tesseract = require("tesseract.js");

const GEMINI_API_KEY = "Your_Key"; // Replace with your actual Gemini API Key

// Helper to extract text from a PDF
const extractTextFromPDF = async (filePath) => {
  const dataBuffer = fs.readFileSync(filePath);
  const pdfData = await pdfParse(dataBuffer);
  return pdfData.text || "";
};

// Helper to extract text from an Excel file
const extractTextFromExcel = (filePath) => {
  const workbook = XLSX.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);
  return JSON.stringify(sheetData, null, 2); // Convert to a JSON string for Gemini processing
};

// Helper to extract text from an image using OCR
const extractTextFromImage = async (filePath) => {
  const { data: { text } } = await Tesseract.recognize(filePath, "eng", {
    logger: (m) => console.log(m), // Optional logging for OCR progress
  });
  return text || "";
};

// Main controller function
exports.uploadFile = async (req, res) => {
  try {
    const filePath = path.resolve(__dirname, "../uploads", req.file.filename);
    const fileType = req.file.mimetype;

    let extractedText = "";

    // Step 1: Extract text locally based on file type
    if (fileType === "application/pdf") {
      console.log("Processing PDF file...");
      extractedText = await extractTextFromPDF(filePath);
    } else if (fileType === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
      console.log("Processing Excel file...");
      extractedText = extractTextFromExcel(filePath);
    } else if (fileType === "image/jpeg" || fileType === "image/png") {
      console.log("Processing image file...");
      extractedText = await extractTextFromImage(filePath);
    } else {
      return res.status(400).json({ message: "Unsupported file type" });
    }

    if (!extractedText.trim()) {
      return res.status(400).json({ message: "Failed to extract text from the file." });
    }

    // Step 2: Send the extracted text to Gemini API for advanced processing
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`,
      {
        contents: [
          {
            parts: [
              { text: extractedText },
            ],
          },
        ],
      },
      {
        headers: { "Content-Type": "application/json" },
      }
    );

    const generatedContent = response.data;

    // Step 3: Return the final response to the frontend
    res.status(200).json({
      message: "File processed successfully!",
      extractedText, // Text extracted locally
      generatedContent, // Content generated by Gemini API
    });
  } catch (error) {
    console.error("Error processing file:", error.response?.data || error.message);
    res.status(500).json({
      message: "Error processing file.",
      error: error.response?.data || error.message,
    });
  }
};
